"""
CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ.
–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏.
"""

import sys
from datetime import date, time, datetime, timedelta
from typing import Optional, List
from backend import BookingBackend
from models import User, Table, Booking, BookingStatus


class BookingCLI:
    """CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        self.backend = BookingBackend()
        self.current_user: Optional[User] = None
    
    def print_header(self, title: str):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        print("=" * 60)
        print(f"üçΩÔ∏è  {title}")
        print("=" * 60)
    
    def print_menu(self):
        """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        print("\nüìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:")
        print("1. üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã")
        print("2. üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª")
        print("3. üë§ –í–æ–π—Ç–∏/–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        print("4. üìä –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("5. üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("6. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–æ–ª–∏–∫–∞")
        print("0. üö™ –í—ã—Ö–æ–¥")
        print("-" * 60)
    
    def get_user_choice(self, prompt: str, valid_choices: List[str] = None) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        while True:
            try:
                choice = input(f"\n{prompt}: ").strip()
                
                if valid_choices and choice not in valid_choices:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(valid_choices)}")
                    continue
                
                return choice
            except KeyboardInterrupt:
                print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                sys.exit(0)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
    
    def get_user_info(self) -> Optional[User]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        print("\nüë§ –í–•–û–î / –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø")
        print("-" * 30)
        
        phone = self.get_user_choice("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω").strip()
        if not phone:
            print("‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = self.backend.get_user_by_phone(phone)
        
        if existing_user:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {existing_user.name}")
            return existing_user
        else:
            print("üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
            
            name = self.get_user_choice("–ò–º—è").strip()
            if not name:
                print("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = self.backend.create_user(name, phone)
            if new_user:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {new_user.name}")
                return new_user
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return None
    
    def show_booked_tables(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã."""
        self.print_header("–ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù–ù–´–ï –°–¢–û–õ–´")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            bookings = self.backend.get_all_bookings()
            
            if not bookings:
                print("‚úÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤")
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –¥–∞—Ç–∞–º
            bookings_by_date = {}
            for booking in bookings:
                booking_date = booking.booking_date
                if booking_date not in bookings_by_date:
                    bookings_by_date[booking_date] = []
                bookings_by_date[booking_date].append(booking)
            
            # –í—ã–≤–æ–¥–∏–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã –ø–æ –¥–∞—Ç–∞–º
            for booking_date in sorted(bookings_by_date.keys()):
                print(f"\nüìÖ {booking_date.strftime('%d.%m.%Y (%A)')}")
                print("-" * 50)
                
                day_bookings = bookings_by_date[booking_date]
                for booking in sorted(day_bookings, key=lambda b: b.booking_time):
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    table = self.backend.get_table(booking.table_id)
                    user = self.backend.get_user(booking.user_id)
                    
                    status_emoji = {
                        BookingStatus.PENDING: "‚è≥",
                        BookingStatus.CONFIRMED: "‚úÖ",
                        BookingStatus.CANCELLED: "‚ùå",
                        BookingStatus.COMPLETED: "üèÅ"
                    }
                    
                    status_text = {
                        BookingStatus.PENDING: "–û–∂–∏–¥–∞–µ—Ç",
                        BookingStatus.CONFIRMED: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
                        BookingStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω–æ",
                        BookingStatus.COMPLETED: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                    }
                    
                    if table and user:
                        print(f"  ü™ë –°—Ç–æ–ª ‚Ññ{table.number} ({table.location})")
                        print(f"     ‚è∞ {booking.booking_time.strftime('%H:%M')} - {booking.get_end_time().strftime('%H:%M') if booking.get_end_time() else 'N/A'}")
                        print(f"     üë• {booking.guests_count} –≥–æ—Å—Ç–µ–π")
                        print(f"     üë§ {user.name} ({user.phone})")
                        print(f"     {status_emoji.get(booking.status, '‚ùì')} {status_text.get(booking.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                        if booking.special_requests:
                            print(f"     üí¨ {booking.special_requests}")
                        print()
            
            print(f"üìä –í—Å–µ–≥–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤: {len(bookings)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def check_table_availability(self, table_id: int, booking_date: date, 
                               booking_time: time, duration_hours: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–æ–ª–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–ª
            table = self.backend.get_table(table_id)
            if not table:
                print(f"‚ùå –°—Ç–æ–ª —Å ID {table_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            if not table.is_active:
                print(f"‚ùå –°—Ç–æ–ª ‚Ññ{table.number} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
            conflicting_bookings = self.backend.get_conflicting_bookings(
                table_id, booking_date, booking_time, duration_hours
            )
            
            if conflicting_bookings:
                print(f"‚ùå –°—Ç–æ–ª ‚Ññ{table.number} –∑–∞–Ω—è—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
                print("üìÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
                for conflict in conflicting_bookings:
                    user = self.backend.get_user(conflict.user_id)
                    user_name = user.name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    print(f"   ‚è∞ {conflict.booking_time.strftime('%H:%M')} - {conflict.get_end_time().strftime('%H:%M') if conflict.get_end_time() else 'N/A'} ({user_name})")
                return False
            
            print(f"‚úÖ –°—Ç–æ–ª ‚Ññ{table.number} –¥–æ—Å—Ç—É–ø–µ–Ω!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    def book_table_step1_check_availability(self) -> Optional[dict]:
        """–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–æ–ª–∞."""
        print("\nüìÖ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –°–¢–û–õ–ê - –®–ê–ì 1")
        print("-" * 40)
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–æ–ª–∞")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
            date_input = self.get_user_choice("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–µ–≥–æ–¥–Ω—è")
            if not date_input:
                booking_date = date.today()
            else:
                booking_date = datetime.strptime(date_input, "%Y-%m-%d").date()
            
            print(f"üìÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {booking_date.strftime('%d.%m.%Y (%A)')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è
            time_input = self.get_user_choice("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM)")
            try:
                booking_time = datetime.strptime(time_input, "%H:%M").time()
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")
                return None
            
            print(f"‚è∞ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {booking_time.strftime('%H:%M')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration_input = self.get_user_choice("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)", ["1", "1.5", "2", "2.5", "3", "3.5", "4"])
            duration_hours = float(duration_input) if duration_input else 2.0
            
            print(f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_hours} —á–∞—Å–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π
            guests_input = self.get_user_choice("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π")
            try:
                guests_count = int(guests_input)
                if guests_count <= 0:
                    print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                    return None
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π")
                return None
            
            print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {guests_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª—ã
            print(f"\nüîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤...")
            available_tables = self.backend.get_available_tables(guests_count)
            
            if not available_tables:
                print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ –¥–ª—è {guests_count} –≥–æ—Å—Ç–µ–π")
                return None
            
            print(f"\nü™ë –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª—ã –¥–ª—è {guests_count} –≥–æ—Å—Ç–µ–π:")
            print("-" * 50)
            
            available_options = []
            for i, table in enumerate(available_tables, 1):
                print(f"{i}. –°—Ç–æ–ª ‚Ññ{table.number} - {table.capacity} –º–µ—Å—Ç ({table.location})")
                available_options.append(str(i))
            
            # –í—ã–±–æ—Ä —Å—Ç–æ–ª–∞
            choice = self.get_user_choice("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª (–Ω–æ–º–µ—Ä)", available_options)
            selected_table = available_tables[int(choice) - 1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
            if self.check_table_availability(selected_table.id, booking_date, booking_time, duration_hours):
                return {
                    'table_id': selected_table.id,
                    'table_number': selected_table.number,
                    'booking_date': booking_date,
                    'booking_time': booking_time,
                    'duration_hours': duration_hours,
                    'guests_count': guests_count
                }
            else:
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 1: {e}")
            return None
    
    def book_table_step2_confirm_booking(self, booking_data: dict) -> bool:
        """–®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        print("\nüìÖ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –°–¢–û–õ–ê - –®–ê–ì 2")
        print("-" * 40)
        print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            if not self.current_user:
                print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
                user = self.get_user_info()
                if not user:
                    return False
                self.current_user = user
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            table = self.backend.get_table(booking_data['table_id'])
            print(f"\nüìã –î–ê–ù–ù–´–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø:")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.current_user.name} ({self.current_user.phone})")
            print(f"ü™ë –°—Ç–æ–ª: ‚Ññ{table.number} ({table.location})")
            print(f"üìÖ –î–∞—Ç–∞: {booking_data['booking_date'].strftime('%d.%m.%Y (%A)')}")
            print(f"‚è∞ –í—Ä–µ–º—è: {booking_data['booking_time'].strftime('%H:%M')} - {(datetime.combine(booking_data['booking_date'], booking_data['booking_time']) + timedelta(hours=booking_data['duration_hours'])).strftime('%H:%M')}")
            print(f"üë• –ì–æ—Å—Ç–∏: {booking_data['guests_count']} —á–µ–ª–æ–≤–µ–∫")
            print(f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {booking_data['duration_hours']} —á–∞—Å–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
            special_requests = self.get_user_choice("–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm = self.get_user_choice("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/N)", ["y", "n", "Y", "N", "yes", "no", "–¥–∞", "–Ω–µ—Ç"])
            
            if confirm.lower() in ['y', 'yes', '–¥–∞']:
                # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                booking = self.backend.create_booking(
                    user_id=self.current_user.id,
                    table_id=booking_data['table_id'],
                    booking_date=booking_data['booking_date'],
                    booking_time=booking_data['booking_time'],
                    guests_count=booking_data['guests_count'],
                    duration_hours=booking_data['duration_hours'],
                    special_requests=special_requests
                )
                
                if booking:
                    print(f"\nüéâ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–û –£–°–ü–ï–®–ù–û!")
                    print(f"üìã –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking.id}")
                    print(f"üì± –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω {self.current_user.phone} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
                    return True
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                    return False
            else:
                print("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 2: {e}")
            return False
    
    def book_table(self):
        """–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∞."""
        self.print_header("–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –°–¢–û–õ–ê")
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        booking_data = self.book_table_step1_check_availability()
        if not booking_data:
            print("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –Ω–∞ —ç—Ç–∞–ø–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏")
            return
        
        # –®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ
        if self.book_table_step2_confirm_booking(booking_data):
            print("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    def show_my_bookings(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.print_header("–ú–û–ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø")
        
        if not self.current_user:
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
            user = self.get_user_info()
            if not user:
                return
            self.current_user = user
        
        try:
            bookings = self.backend.get_bookings_by_user(self.current_user.id)
            
            if not bookings:
                print("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
                return
            
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.current_user.name} ({self.current_user.phone})")
            print(f"üìä –í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(bookings)}")
            print("-" * 60)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_groups = {}
            for booking in bookings:
                status = booking.status
                if status not in status_groups:
                    status_groups[status] = []
                status_groups[status].append(booking)
            
            status_names = {
                BookingStatus.PENDING: "‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                BookingStatus.CONFIRMED: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ",
                BookingStatus.CANCELLED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ",
                BookingStatus.COMPLETED: "üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"
            }
            
            for status, bookings_list in status_groups.items():
                print(f"\n{status_names.get(status, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ')} ({len(bookings_list)}):")
                print("-" * 40)
                
                for booking in sorted(bookings_list, key=lambda b: (b.booking_date, b.booking_time)):
                    table = self.backend.get_table(booking.table_id)
                    if table:
                        print(f"ü™ë –°—Ç–æ–ª ‚Ññ{table.number} ({table.location})")
                        print(f"   üìÖ {booking.booking_date.strftime('%d.%m.%Y')} –≤ {booking.booking_time.strftime('%H:%M')}")
                        print(f"   üë• {booking.guests_count} –≥–æ—Å—Ç–µ–π")
                        print(f"   ‚è≥ {booking.duration_hours} —á–∞—Å–æ–≤")
                        if booking.special_requests:
                            print(f"   üí¨ {booking.special_requests}")
                        print(f"   üìã ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking.id}")
                        print()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º."""
        self.print_header("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ô")
        
        try:
            stats = self.backend.get_booking_statistics()
            
            if not stats:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                return
            
            print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"üìÖ –í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {stats.get('total_bookings', 0)}")
            
            print(f"\nüìà –ü–û –°–¢–ê–¢–£–°–ê–ú:")
            status_names = {
                'pending': '‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
                'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ',
                'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ',
                'completed': 'üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ'
            }
            
            for status, count in stats.get('status_breakdown', {}).items():
                status_name = status_names.get(status, f"‚ùì {status}")
                print(f"   {status_name}: {count}")
            
            print(f"\nü™ë –ü–û–ü–£–õ–Ø–†–ù–û–°–¢–¨ –°–¢–û–õ–û–í:")
            table_popularity = stats.get('table_popularity', [])
            if table_popularity:
                for table_info in sorted(table_popularity, key=lambda x: x['bookings_count'], reverse=True):
                    print(f"   ü™ë –°—Ç–æ–ª ‚Ññ{table_info['table_number']} ({table_info['location']}): {table_info['bookings_count']} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
            else:
                print("   üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Å—Ç–æ–ª–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def check_table_availability(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞."""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–¢–û–õ–ò–ö–ê")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
            date_input = self.get_user_choice("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–µ–≥–æ–¥–Ω—è")
            if not date_input:
                booking_date = date.today()
            else:
                booking_date = datetime.strptime(date_input, "%Y-%m-%d").date()
            
            print(f"üìÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {booking_date.strftime('%d.%m.%Y (%A)')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è
            time_input = self.get_user_choice("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM)")
            try:
                booking_time = datetime.strptime(time_input, "%H:%M").time()
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")
                return
            
            print(f"‚è∞ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {booking_time.strftime('%H:%M')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration_input = self.get_user_choice("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)", ["1", "1.5", "2", "2.5", "3", "3.5", "4"])
            duration_hours = float(duration_input) if duration_input else 2.0
            
            print(f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_hours} —á–∞—Å–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π
            guests_input = self.get_user_choice("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π")
            try:
                guests_count = int(guests_input)
                if guests_count <= 0:
                    print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                    return
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π")
                return
            
            print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {guests_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª—ã
            print(f"\nüîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤...")
            available_tables = self.backend.get_available_tables(guests_count)
            
            if not available_tables:
                print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ –¥–ª—è {guests_count} –≥–æ—Å—Ç–µ–π")
                return
            
            print(f"\nü™ë –î–û–°–¢–£–ü–ù–´–ï –°–¢–û–õ–´ –î–õ–Ø {guests_count} –ì–û–°–¢–ï–ô:")
            print("=" * 60)
            
            available_options = []
            free_tables = []
            
            for i, table in enumerate(available_tables, 1):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–∞
                is_available = self.check_table_availability_detailed(
                    table.id, booking_date, booking_time, duration_hours
                )
                
                status_emoji = "‚úÖ" if is_available else "‚ùå"
                status_text = "–°–≤–æ–±–æ–¥–µ–Ω" if is_available else "–ó–∞–Ω—è—Ç"
                
                print(f"{i:2d}. {status_emoji} –°—Ç–æ–ª ‚Ññ{table.number} - {table.capacity} –º–µ—Å—Ç ({table.location}) - {status_text}")
                
                if is_available:
                    free_tables.append((i, table))
                    available_options.append(str(i))
            
            if not free_tables:
                print(f"\n‚ùå –í—Å–µ —Å—Ç–æ–ª—ã –∑–∞–Ω—è—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!")
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–∞—Ç—É")
                return
            
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(free_tables)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ –∏–∑ {len(available_tables)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤
            print(f"\nüìã –î–ï–¢–ê–õ–ò –°–í–û–ë–û–î–ù–´–• –°–¢–û–õ–û–í:")
            print("-" * 60)
            
            for option_num, table in free_tables:
                print(f"ü™ë –°—Ç–æ–ª ‚Ññ{table.number} ({table.location})")
                print(f"   üìè –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {table.capacity} –º–µ—Å—Ç")
                print(f"   üìÖ –î–∞—Ç–∞: {booking_date.strftime('%d.%m.%Y (%A)')}")
                print(f"   ‚è∞ –í—Ä–µ–º—è: {booking_time.strftime('%H:%M')} - {(datetime.combine(booking_date, booking_time) + timedelta(hours=duration_hours)).strftime('%H:%M')}")
                print(f"   ‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_hours} —á–∞—Å–æ–≤")
                print(f"   üë• –í–∞—à–∏ –≥–æ—Å—Ç–∏: {guests_count} —á–µ–ª–æ–≤–µ–∫")
                print()
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
            response = self.get_user_choice("–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤? (y/N)", ["y", "n", "Y", "N", "yes", "no", "–¥–∞", "–Ω–µ—Ç"])
            
            if response.lower() in ['y', 'yes', '–¥–∞']:
                print("\nüîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é...")
                self.book_table_from_availability_check(booking_date, booking_time, duration_hours, guests_count, free_tables)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
    
    def check_table_availability_detailed(self, table_id: int, booking_date: date, 
                                        booking_time: time, duration_hours: float) -> bool:
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–ª
            table = self.backend.get_table(table_id)
            if not table or not table.is_active:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
            conflicting_bookings = self.backend.get_conflicting_bookings(
                table_id, booking_date, booking_time, duration_hours
            )
            
            return len(conflicting_bookings) == 0
            
        except Exception:
            return False
    
    def book_table_from_availability_check(self, booking_date: date, booking_time: time, 
                                         duration_hours: float, guests_count: int, free_tables: list):
        """–ë—Ä–æ–Ω–∏—Ä—É–µ—Ç —Å—Ç–æ–ª –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏."""
        try:
            print("\nüìÖ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –í–´–ë–†–ê–ù–ù–û–ì–û –°–¢–û–õ–ê")
            print("-" * 40)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not self.current_user:
                print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
                user = self.get_user_info()
                if not user:
                    return
                self.current_user = user
            
            # –í—ã–±–æ—Ä —Å—Ç–æ–ª–∞
            available_options = [str(i) for i, _ in free_tables]
            choice = self.get_user_choice("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª (–Ω–æ–º–µ—Ä)", available_options)
            selected_option = int(choice)
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª
            selected_table = None
            for option_num, table in free_tables:
                if option_num == selected_option:
                    selected_table = table
                    break
            
            if not selected_table:
                print("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"\nüìã –î–ê–ù–ù–´–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø:")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.current_user.name} ({self.current_user.phone})")
            print(f"ü™ë –°—Ç–æ–ª: ‚Ññ{selected_table.number} ({selected_table.location})")
            print(f"üìÖ –î–∞—Ç–∞: {booking_date.strftime('%d.%m.%Y (%A)')}")
            print(f"‚è∞ –í—Ä–µ–º—è: {booking_time.strftime('%H:%M')} - {(datetime.combine(booking_date, booking_time) + timedelta(hours=duration_hours)).strftime('%H:%M')}")
            print(f"üë• –ì–æ—Å—Ç–∏: {guests_count} —á–µ–ª–æ–≤–µ–∫")
            print(f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_hours} —á–∞—Å–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
            special_requests = self.get_user_choice("–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm = self.get_user_choice("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/N)", ["y", "n", "Y", "N", "yes", "no", "–¥–∞", "–Ω–µ—Ç"])
            
            if confirm.lower() in ['y', 'yes', '–¥–∞']:
                # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                booking = self.backend.create_booking(
                    user_id=self.current_user.id,
                    table_id=selected_table.id,
                    booking_date=booking_date,
                    booking_time=booking_time,
                    guests_count=guests_count,
                    duration_hours=duration_hours,
                    special_requests=special_requests
                )
                
                if booking:
                    print(f"\nüéâ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–û –£–°–ü–ï–®–ù–û!")
                    print(f"üìã –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking.id}")
                    print(f"üì± –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω {self.current_user.phone} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            else:
                print("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤...")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not self.backend.connect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
            print("   - PostgreSQL –∑–∞–ø—É—â–µ–Ω")
            print("   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            print("   - –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã (–∑–∞–ø—É—Å—Ç–∏—Ç–µ install_database.py)")
            return
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        try:
            while True:
                self.print_menu()
                
                choice = self.get_user_choice("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["0", "1", "2", "3", "4", "5", "6"])
                
                if choice == "0":
                    print("\nüëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
                    break
                elif choice == "1":
                    self.show_booked_tables()
                elif choice == "2":
                    self.book_table()
                elif choice == "3":
                    user = self.get_user_info()
                    if user:
                        self.current_user = user
                        print(f"‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {user.name}")
                elif choice == "4":
                    self.show_my_bookings()
                elif choice == "5":
                    self.show_statistics()
                elif choice == "6":
                    self.check_table_availability()
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é
                if choice != "0":
                    input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        
        except KeyboardInterrupt:
            print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.backend.disconnect()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        app = BookingCLI()
        app.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
